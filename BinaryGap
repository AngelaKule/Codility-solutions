/*Write a function:
class Solution { public int solution(int N); }
that, given a positive integer N, returns the length of its longest binary gap. 
The function should return 0 if N doesn't contain a binary gap.
For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. 
Given N = 32 the function should return 0, because N has binary representation '100000' and thus no binary gaps.*/ 

import java.util.*;

class Solution {
    public int solution(int N) {
        // variable to store the number of gap
        int gap = 0;
        // convert N to binary and store it on a char array
        char [] binaryN = Integer.toBinaryString(N).toCharArray();
        
        if (N == 0 || N == 1) return 0; //in case the number is 0 or 1, there are no gap
        int temp = 0; // stores the temp value of gap
        // iterating through the char array to find the gap ( meaning 0 )
        for (int index =0 ; index< binaryN.length;index++){
            if(binaryN[index] == '0'){
                temp ++;
                continue;
            }
            else if (binaryN[index] == '1'){
                if(temp > gap){ // this is needed as temp stores the gap before it finds a 1, and every time you find a 1 the temp is set to 0, so you can find the maximum gap.
                // example 100010000 temp will be 3 after it will be erased by temp =0; after counting again it will be 4, and on the if statement temp =4 > gap = 3
                    gap = temp;
                    temp =0;
                }
            }
        }
    return gap;
    }
}
